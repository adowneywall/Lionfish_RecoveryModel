{
    "contents" : "#### Lionfish dispersal and recolonization script ####\n ## Alan Downey-Wall\n ## Last Mod: 2015-11-24\n\n # Description: Script for modeling the impact of self-recruitment and removal \n #              variability and there impact on recolonization on an arbitrary \n #              local scale over time.  Demographic parameters are default set \n #              to those of the red lionfish (Pterois volitans). \n\nlibrary(ggplot2)\n\n\n#### USER VALUES ####\n\n## Self-recruitment and Removal Range\nSR.RANGE.HIGH   <- 1      # Self-recruitment: 1 = 100%, 0.01 = 1%\nSR.RANGE.LOW    <- 0.01   # Self-recruitment \nSR.INCREMENT    <- 0.1    # Self-recruitment 0.01 = 1% increments\n\nLR.RANGE.HIGH   <- 1      # Lionfish removal (percentage)\nLR.RANGE.LOW    <- 0      # Lionfish removal (percentage)\nLR.INCREMENT    <- 0.1    # Lionfish removal (percentage)\n\nSTART.POP       <- 1      # Starting Pop - proportion - 1 = max pop expected\n\n\n## Demographic Parameters\nREC.PER.IND     <- 0.818  # Recruits per individual\n                          # See section below of 'Larvae per adult' for calculation. \nJUVI.MORT       <- 0.5  # Juvenile mortality #0.165\nADULT.MORT      <- 0.052  # Adult mortality \nMONTH           <- 6      # Run length of model (in months)\nADULT.FRAC      <- 0.96   # Fraction of starting population that are adults \n                          # * Based on the empirical estimates of Belize 2014 lionfish sample\n                          #   on the forereef.\n\n## Calculating Recruit per Individual\n # This section takes egg and larval demographic parameters and calculates\n # the monthly number of recruits per individual adult lionfish.\nADULT.FEM.FRAC  <- 0.49    # Proportion of adults that are females\nADULT.FEM.MAT   <- 0.79    # Proportion of females that are mature\nFE              <- 194577  # Fecundity - number of eggs per female per month\nME              <- 0.31    # Egg mortality (days)\nDE              <- 3       # Egg duration (days)\nML              <- 0.35    # Larval mortality (days)\nDL              <- 30      # Larval duration (days)\nE               <- 2.71828 # e constant \n\nREC.PER.IND     <- ADULT.FEM.FRAC*ADULT.FEM.MAT*FE*E^-(ME*DE+ML*DL) \n\n\n#### Calculated values ####\nMORT.JUVI.TOT    <- 1 - JUVI.MORT  # Starting fraction of juveniles alive after first month  \nADULT.MORT       <- 1 - ADULT.MORT # Starting fraction of adults alive after first month\n\n# Vector with complete self-recruitment range\nSR.range         <- seq(to = SR.RANGE.HIGH,from = SR.RANGE.LOW,by = SR.INCREMENT)\n\n#Vector with complete local removal range\nLR.range         <- seq(from = LR.RANGE.HIGH,to = LR.RANGE.LOW,by = -LR.INCREMENT)\n\n#Array with all combinations of of SR and LR values\nLR.SR.array      <- array(dim=c(length(SR.range),length(LR.range),2));\n\nLR.SR.array[,,1] <- t(apply(LR.SR.array[,,1],1,function(x) {x<-LR.range}))\nLR.SR.array[,,2] <- apply(LR.SR.array[,,2],2,function(x) {x<-SR.range})\n\n\n#### Model Initializations ####\n\nDIST.RECRUIT     <-NULL\nTEMP.LARVAE      <-NULL\n\n## Initialize age-class bins \n\n# Written to initialize the bins based on the time (in years) \n# since the arrival of the invasion.\n\nYEARS            <- 7          # years since lionfish arrived in Belize\nBINS             <- 12         # Number of of age/life stage bins\nMONTH.STEPS      <- YEARS*12   # months since invasion\n\n# Initializes a matrix which holds bin proportion estimates based on \n# demographic estimates and time (in years) since population established\ninit.agebin      <- matrix(ncol = BINS, nrow = (MONTH.STEPS))\n\n# For loop populates init.agebin matrix using recruit per individual (REC.PER.IND)\n# and the START.POP, as well as the transition mortalities (i.e. monthly mortalities for each\n# stage class)\nfor( i in 1:MONTH.STEPS){\n  for(j in 1:BINS){\n    if (j == 1) { \n      if (i == 1) { init.agebin[i,j] <- REC.PER.IND*0.5 }\n      else {init.agebin[i,j] <- REC.PER.IND*init.agebin[i-1,BINS]}\n    }\n    else {\n      if (j == BINS && i != 1) {init.agebin[i,j] <- init.agebin[i-1,j]*ADULT.MORT+init.agebin[i,j-1]*MORT.JUVI.TOT} \n      else { init.agebin[i,j] <- init.agebin[i,j-1]*MORT.JUVI.TOT}\n    }\n  }\n}\n\n# Vector of the final age-bin fractions after time (YEARS), adjust so that the sum of each BIN \n# is equal to 1 (i.e. this is the relative proportion of the population at each age class).  This \n# is used as the initial state of the population prior to removal\nage.bin.final <- sapply(init.agebin[MONTH.STEPS,],function(x) {x/sum(init.agebin[MONTH.STEPS,])})\nsum(age.bin.final[1:11])\n\n# Intializes the 4-d array where model output will be stored\nmodel.output <- array(dim=c(length(SR.range),length(LR.range),MONTH,length(age.bin.final)))\n\nfor(i in 1:length(variable)) {\n  vec.2<-sapply(vec,function(x,y,e){x/y[e]},y=variable,e=i)\n  print(vec.2)\n  \n  examp[,1,1,] <- vec.2\n}\nexample.list<-apply(variable,1,function(x){x=vec*100/x},y=vec)\ntemp.matrix <- apply(examp,1:2,function(x){x=vec})\ntemp.matrix[,,1]\ndim(temp.matrix)\ntemp.matrix<-aperm(temp.matrix, c(2,3,1))\ndim(temp.matrix)\n\n#### Model with monthly removals ####\ntemp.h <- function(g,e) {g*1/(e)}\n\nmodel.func <- function(x,y,z) {\n  \n  temp.hold <- NULL\n  #temp.matrix <- array(dim=c(length(SR.range),length(LR.range),1,length(age.bin.final)))\n  \n  #Monthly recruitment from distant sources (outside of removal area)\n  dist.recruit <- (START.POP * REC.PER.IND * (1-x[2])) \n  \n  #Starting local pop. after removal\n  if(k==1) {\n    #temp.hold <- sapply(x,function(g,e) {(1-g[1])*e},e=y)\n    temp.hold <- sapply(y,function(e,g){(1-g)*e},g=z[1,,1])\n    #temp.hold <- sapply(age.bin.final,function(g,e) {g*e},e=1-LR.SR.array[1,2,1])\n    x <- apply(x,1:2,function(f){f=temp.hold})\n  }\n  else {\n    #temp.hold <- sapply(y,function(g,e) {g/(1-e[1])},e=1-x[1])\n    #temp.h <- function(g,e) {g*1/(e)}\n    x <- sapply(z,temp.h,e=1-x[1])\n    #temp.hold[1] <- dist.recruit * (z[12] * REC.PER.IND * x[2])\n    #temp.hold[12] <- z[12]*adult.mort + temp.hold[11]*JUVI.MORT\n    \n  }\n  return(x)\n}\n\nfor( k in 1:MONTH) {\n  if( k == 1) { \n    model.output[,,1,]<-apply(model.output[,,1,],1:2,model.func,y=age.bin.final,z=LR.SR.array)\n  }\n  else {model.output[,,k,]<-apply(model.output[,,k-1,],1:2,model.func,y=age.bin.final,z=LR.SR.array)}\n  print(paste(\"Analysis\",100*k/MONTH,\"% complete\"))\n}\n\n\n\n\nfor(k in 1:MONTH){\n      \n      larval <-((temp.dist + local.size * SR.range[i]) * REC.PER.IND) ## Larval fraction\n      \n      #### Juveniles + Incoming Larvae\n      if(k==1) {\n        juvi[k,1]<-early.juvi                                         ## Initialize larval stage\n        for(l in 2:13){juvi[k,l] <- juvi[k,l-1] * mort.juvi.tot       ## Initialize juvinile bins\n        }\n        for(l in 2:13){juvi[k,l] <- juvi[k,l] * (1-LR.range[j]) }  ## Applies LR mortality to each bin\n      } \n      else {                                                            ## Creates juvi bins for all months after the first\n        juvi[k,1] <- larval             \n        for(l in 2:13){\n          juvi[k,l] <- juvi[k-1,l-1] * mort.juvi.tot  \n        }\n      }\n      \n      monthly.adult.temp  <- (juvi[k,13] + local.size * adult.mort)  #* (1-LR.range[j])\n      monthly.total.temp     <- ((sum(juvi[k,2:13]) + local.size * adult.mort)  * (1-LR.range[j]))/START.POP\n    \n      monthly.adult[[k]][i,j]<-monthly.adult.temp                    ## Actual adult pop\n      monthly.total[[k]][i,j]<-monthly.total.temp                          ## Total pop\n      \n      local.size<-monthly.actual.temp                               ## Adult fraction for k+1\n}\n\n\n\n### Adult Population\nlion.SR<-c(0.01,0.0274,0.073,0.151,0.26)\nlion.LR<-c(0.1,0.25,0.50,0.75,0.90)\nLR.range[57]\nSR.range[58]\ntemp.LR<-NULL\ntemp.SR<-NULL\nfor(j in 1:length(LR.range)){\n  for(k in 1:length(lion.LR)){\n    if(round(LR.range[j],digits=2) == round(lion.LR[k],digits=2)){\n      temp.LR<-c(temp.LR,j)\n    }\n  }\n}\n\n\nfor(j in 1:length(SR.range)){\n  for(k in 1:length(lion.SR)){\n    if(round(SR.range[j],digits=2) == round(lion.SR[k],digits=2)){\n      temp.SR<-c(temp.SR,j)\n    }\n  }\n}\n\ntemp.line<-0\ntemp.place<-0\nbreed.rec<-NULL\nline<-NULL\nmonth.temp<-NULL\nrecruit<-NULL\nshort.MONTH<-36\nfor(i in 1:length(temp.SR)) {\n  for(j in 1:length(temp.LR)){\n    temp.line<-temp.line+1\n    for(k in 0:short.MONTH) {\n      if(k == 0) {\n        temp.place<-(temp.line)*(short.MONTH+1)+k\n        #breed.rec<-c(breed.rec,(START.POP*lion.LR[j])) ## Adults\n        breed.rec<-c(breed.rec,(SUM.POP*lion.LR[j])/SUM.POP)  ## Sum pop\n        line<-c(line,temp.line)\n        month.temp<-c(month.temp,k)\n        recruit<-c(recruit,temp.SR[i])\n      }\n      else {\n        temp.place<-(temp.line)*(short.MONTH+1)+k\n        #breed.rec<-c(breed.rec,monthly.actual[[k]][temp.SR[i],temp.LR[j]]) ## Adult\n        breed.rec<-c(breed.rec,monthly.sum[[k]][temp.SR[i],temp.LR[j]]) ##SUM\n        line<-c(line,temp.line)\n        month.temp<-c(month.temp,k)\n        recruit<-c(recruit,temp.SR[i])\n      }\n    }\n  }\n}\n\nfinal.lion.dat<-data.frame(line=line,month=month.temp,breed.rec=breed.rec,recruit=recruit)\nfinal.lion.dat$recruit<-as.factor(final.lion.dat$recruit)\nfinal.lion.dat$line<-as.factor(final.lion.dat$line)\nplot(x=recruit,y=breed.rec,data=final.lion.dat)\n\n\n#### Graphing Model ####\np<-ggplot(final.lion.dat, aes(x=month, y=breed.rec*100, group=line, linetype=recruit))\nfinal<-p + geom_line(size=1) +  scale_x_continuous(limits=c(1, 36),breaks = round(seq(1, 36, by = 1))) # + scale_x_continuous(breaks = round(seq(1, 36, by = 1)))  \nfinal<- final +scale_y_continuous(limits=c(0,100),breaks = seq(0, 100, by = 10))\n(final<-final + theme(\n  panel.background = element_rect(linetype=\"solid\",colour = \"black\",fill=\"transparent\"), #size=1.5), # or theme_blank()\n  panel.grid.minor.y = element_blank(),\n  panel.grid.major.y = element_blank(),\n  panel.grid.minor.x = element_blank(), \n  panel.grid.major.x = element_blank(),\n  axis.title.y = element_blank(),\n  axis.text.y = element_text(size=rel(2), colour = \"black\"),\n  legend.title = element_blank(),\n  legend.key = element_blank(),\n  legend.text = element_blank(),\n  axis.title.x = element_blank(),\n  axis.text.x =element_text(size=rel(2), colour = \"black\"),\n  axis.ticks.x = element_blank(),\n  plot.background = element_rect(fill = \"transparent\",colour = NA)))\nf2 <- final + geom_hline(yintercept=100) + geom_vline(xintercept=12,size=1.5) + geom_hline(yintercept=1-.89) \nf2\n\npar(mar=c(5,8,1,2))\ncontour2D(y=(100*LR.range),x=(100*SR.range),monthly.actual[[36]],levels = c(1-.96,1-.89,1-.75,.4,.6,.8,1), \n          labcex = .01, lwd = 4.5, alpha = 0.8, \n          lab=list(\"1\",\"2\",\"3\",\"\",\"\",\"\"),\n          col = c(\"orange\",\"red\",\"orange\",\"black\",\"black\",\"black\",\"black\"),\n          resfac = 4, #method = \"simple\" ,\n          xlab= list(\"Self-Recruitment (%)\"),\n          ylab =c(\"Monthly Population \\n Removal (%)\"),\n          axes = TRUE , cex.axis=2, cex.lab=2,\n          clab = \"Proportion of Equilibrium Population\",\n          colkey=FALSE)\n\nabline(v = c((100*0.029),(100*.26))) \n\nmelted.actual<-melt(monthly.sum)\n\n\n### USED for sensitivity calculations for MONTHLY removal\nactual.reduce<-rename(melted.actual,c(\"X1\"=\"sr\",\"X2\"=\"lr\",\"value\"=\"rec.prop\",\"L1\"=\"month\"))\nactual.reduce<-subset(actual.reduce,actual.reduce$sr < 27)\nsummary(actual.reduce)\n1-.89\nactual.reduce<-subset(actual.reduce,actual.reduce$rec.prop > 0.108 & actual.reduce$rec.prop < 0.112)\n#actual.reduce<-subset(actual.reduce,actual.reduce$rec.prop < (.111) & actual.reduce$rec.prop > (.105))\nactual.reduce<-subset(actual.reduce,actual.reduce$month == 36)\ntable(actual.reduce$lr)\nplot(x=actual.reduce$sr,y=100-actual.reduce$lr)\nsimplelm<-lm(lr~sr,data=actual.reduce)\nsummary(simplelm)\n\n\n#### Sensitivity for Single Removal ####\n\nmelt.single.a<-melt(monthly.actual)\nmelt.single.s<-melt(monthly.sum)\n\nsingle.a<-rename(melt.single.a,c(\"X1\"=\"sr\",\"X2\"=\"lr\",\"value\"=\"rec.prop\",\"L1\"=\"month\"))\nsingle.s<-rename(melt.single.s,c(\"X1\"=\"sr\",\"X2\"=\"lr\",\"value\"=\"rec.prop\",\"L1\"=\"month\"))\n\nsingle.a<-subset(single.a,single.a$sr<27)\nsingle.s<-subset(single.s,single.s$sr<27)\n\nsingle.a<-subset(single.a,single.a$lr == )\nsingle.s<-subset(single.s,single.s$sr<27)\n\nLR.range[1]\n\n",
    "created" : 1449109926981.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3150574328",
    "id" : "5712EF7C",
    "lastKnownWriteTime" : 1449248374,
    "path" : "C:/Users/Alan/Desktop/Final_recovery_modelscript2.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}